cmake_minimum_required(VERSION 3.1)
cmake_policy(VERSION 3.1)

# Consider changing the project name to something relevant for you.
project(PySide2Ads)

# ================================ General configuration ======================================

# Set CPP standard to C++11 minimum.
set(CMAKE_CXX_STANDARD 11)

# The sample library for which we will create bindings. You can change the name to something
# relevant for your project.
set(sample_library "qtadvanceddocking")

# The name of the generated bindings module (as imported in Python). You can change the name
# to something relevant for your project.
set(bindings_library "ads")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_SOURCE_DIR}/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources   
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockareatabbar_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockareatitlebar_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockareawidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockcomponentsfactory_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockcontainerwidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockfocuscontroller_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockmanager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockoverlay_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdocksplitter_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockwidgettab_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cdockwidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_celidinglabel_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_cfloatingdockcontainer_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_ciconprovider_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_python.h
    )

# ================================== Shiboken detection ======================================
if(NOT PYTHON_EXECUTABLE)
    find_program(PYTHON_EXECUTABLE "python")
endif()
message(STATUS "Using python interpreter: ${PYTHON_EXECUTABLE}")

find_package(Shiboken2 2.0.0 REQUIRED)
find_package(Shiboken2 COMPONENTS libshiboken REQUIRED)
find_package(PySide2 2.0.0 REQUIRED)
find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)
find_package(qtadvanceddocking)

message(STATUS "Qt include dirs: ${Qt5Widgets_INCLUDE_DIRS}")

get_property(SHIBOKEN_INCLUDE_DIRS TARGET Shiboken2::libshiboken PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "Shiboken include dirs: ${SHIBOKEN_INCLUDE_DIRS}")
get_property(PYSIDE_INCLUDE_DIR TARGET PySide2::pyside2 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "PySide2 include dir: ${PYSIDE_INCLUDE_DIR}")
get_property(ADS_INCLUDE_DIRS TARGET ads::qtadvanceddocking PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "QtAdvancedDocking include dirs: ${ADS_INCLUDE_DIRS}")

add_definitions(${Qt5Widgets_DEFINITIONS})
add_definitions(-DQT_NO_KEYWORDS)

# ====================== Shiboken target for generating binding C++ files  ====================

list(JOIN Qt5Widgets_INCLUDE_DIRS ";-I" qt_includes)
set(qt_includes "-I${qt_includes}")
list(JOIN ADS_INCLUDE_DIRS ";-I" ads_includes)
set(ads_includes "-I${ads_includes}")
set(includes ${qt_includes} ${ads_includes})

# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack --enable-pyside-extensions
    ${qt_includes} ${ads_includes}
    -I${CMAKE_SOURCE_DIR}/src
    -T${PYSIDE_TYPESYSTEMS}
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.add_custom_command(OUTPUT ${generated_sources}
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND "shiboken2"
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================

get_property(SHIBOKEN_LIBRARY TARGET Shiboken2::libshiboken PROPERTY IMPORTED_IMPLIB_RELEASE)
get_property(PYSIDE_LIBRARY TARGET PySide2::pyside2 PROPERTY IMPORTED_IMPLIB_RELEASE)
get_property(ADS_LINK_LIBRARIES TARGET ads::qtadvanceddocking PROPERTY INTERFACE_LINK_LIBRARIES)
get_property(ADS_LIBRARY TARGET ads::qtadvanceddocking PROPERTY IMPORTED_IMPLIB_RELEASE)
message(STATUS "QtAdvancedDocking lib: ${ADS_LIBRARY}")

# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${PYTHON_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${Qt5Widgets_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${SHIBOKEN_PYTHON_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${SHIBOKEN_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR})
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtCore/)
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtWidgets/)
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtGui/)
target_include_directories(${bindings_library} PRIVATE ${ADS_INCLUDE_DIRS})

target_include_directories(${bindings_library} PRIVATE
    $<INSTALL_INTERFACE:include>
)

target_link_libraries(${bindings_library} PRIVATE ${PYSIDE_LIBRARY})
target_link_libraries(${bindings_library} PRIVATE ${SHIBOKEN_PYTHON_LIBRARIES})
target_link_libraries(${bindings_library} PRIVATE ${SHIBOKEN_LIBRARY})
target_link_libraries(${bindings_library} PRIVATE ${ADS_LINK_LIBRARIES})
target_link_libraries(${bindings_library} PRIVATE ${ADS_LIBRARY})

if (UNIX)
    target_link_libraries(${bindings_library} PUBLIC qtadvanceddocking PySide2::pyside2)
endif()

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
if(WIN32)
    set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
    set_property(TARGET ${bindings_library} PROPERTY SUFFIX "${PYTHON_CONFIG_SUFFIX}.pyd")
else()
    set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_CONFIG_SUFFIX}")
endif()

# Make sure the linker doesn't complain about not finding Python symbols on macOS.
if(APPLE)
  set_target_properties(${bindings_library} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(APPLE)


# =============================== CMake target - pyi =============================
set(generate_pyi_options QtAds --sys-path
        "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/../..")

# Add target to generate pyi file, which depends on the module target.
add_custom_target("${bindings_library}_pyi" ALL
                  COMMAND ${CMAKE_COMMAND} -E env ${ld_prefix}
                  "${PYTHON_EXECUTABLE}"
                  "${CMAKE_CURRENT_SOURCE_DIR}/support/generate_pyi.py" ${generate_pyi_options})
add_dependencies("${bindings_library}_pyi" ${bindings_library})